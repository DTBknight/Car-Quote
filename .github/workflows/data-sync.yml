name: data-sync

on:
  schedule:
    # 每周一凌晨0点 (UTC时间)
    - cron: '0 0 * * 1'
  workflow_dispatch: # 允许手动触发
    inputs:
      mode:
        description: '运行模式'
        required: false
        default: 'auto'
        type: choice
        options:
        - 'auto'    # 自动按顺序采集（推荐）
        - 'manual'  # 手动指定品牌
      target_brands:
        description: '指定要爬取的品牌（仅手动模式，用空格分隔，如：BYD Tesla BMW）'
        required: false
        default: ''
      max_concurrent:
        description: '最大并发数（1-3）'
        required: false
        default: '2'
        type: choice
        options:
        - '1'
        - '2'
        - '3'
      max_brands_per_session:
        description: '每次会话最大采集品牌数（自动模式）'
        required: false
        default: '15'
        type: choice
        options:
        - '10'
        - '15'
        - '20'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      mode: ${{ steps.setup.outputs.mode }}
      brands: ${{ steps.setup.outputs.brands }}
      concurrent: ${{ steps.setup.outputs.concurrent }}
      max_brands_per_session: ${{ steps.setup.outputs.max_brands_per_session }}
    steps:
    - name: 设置爬虫参数
      id: setup
      run: |
        # 设置运行模式
        MODE="${{ github.event.inputs.mode || 'auto' }}"
        echo "mode=$MODE" >> $GITHUB_OUTPUT
        
        # 设置品牌参数
        if [ "$MODE" = "manual" ] && [ -n "${{ github.event.inputs.target_brands }}" ]; then
          echo "brands=${{ github.event.inputs.target_brands }}" >> $GITHUB_OUTPUT
        else
          echo "brands=auto" >> $GITHUB_OUTPUT
        fi
        
        # 设置并发数和每次会话最大品牌数
        echo "concurrent=${{ github.event.inputs.max_concurrent || '2' }}" >> $GITHUB_OUTPUT
        echo "max_brands_per_session=${{ github.event.inputs.max_brands_per_session || '15' }}" >> $GITHUB_OUTPUT
        
        # 输出配置信息
        echo "🤖 运行模式: $MODE"
        if [ "$MODE" = "auto" ]; then
          echo "📦 每次最大品牌数: ${{ github.event.inputs.max_brands_per_session || '15' }}"
          echo "🔄 自动按顺序采集，支持断点续传"
        else
          echo "🎯 指定品牌: ${{ github.event.inputs.target_brands || '无' }}"
        fi
        echo "⚙️ 最大并发数: ${{ github.event.inputs.max_concurrent || '2' }}"

  sync:
    runs-on: ubuntu-latest
    needs: setup
    concurrency:
      group: data-sync
      cancel-in-progress: false
    permissions:
      contents: write
      pull-requests: write
      actions: write
      checks: write
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: data-processor/package-lock.json
        
    - name: Install Chrome Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg2 jq
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: Install Dependencies
      run: |
        cd data-processor
        npm ci
        
    - name: 执行爬虫采集
      run: |
        cd data-processor
        echo "🚀 开始执行爬虫采集..."
        echo "📅 执行时间: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "🔧 使用工具: 通用稳定爬虫 v1.0"
        echo "🤖 运行模式: ${{ needs.setup.outputs.mode }}"
        echo "⚡ 最大并发: ${{ needs.setup.outputs.concurrent }}"
        
        # 根据运行模式决定执行方式
        if [ "${{ needs.setup.outputs.mode }}" = "auto" ]; then
          echo "🔄 自动顺序采集模式"
          echo "📦 每次最大品牌数: ${{ needs.setup.outputs.max_brands_per_session }}"
          echo "💾 支持断点续传"
          
          # 设置自动模式的环境变量
          export AUTO_MODE=true
          export MAX_BRANDS_PER_SESSION=${{ needs.setup.outputs.max_brands_per_session }}
          
          # 运行主处理器（支持顺序采集）
          node index-optimized.js all
        else
          echo "🎯 手动指定品牌模式"
          if [ "${{ needs.setup.outputs.brands }}" = "auto" ] || [ -z "${{ needs.setup.outputs.brands }}" ]; then
            echo "❌ 手动模式下必须指定品牌"
            exit 1
          fi
          echo "📊 指定品牌: ${{ needs.setup.outputs.brands }}"
          
          # 使用通用爬虫处理指定品牌
          for brand in ${{ needs.setup.outputs.brands }}; do
            echo "🚗 开始采集品牌: $brand"
            # 这里需要根据品牌名获取品牌ID，暂时使用通用爬虫
            node universal-stable-crawler.js "$brand" 1
          done
        fi
        
        echo "✅ 爬虫任务完成"
      env:
        NODE_ENV: production
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
        CRAWLER_MAX_CONCURRENT: ${{ needs.setup.outputs.concurrent }}
      timeout-minutes: 480
        
    - name: 验证爬虫结果
      run: |
        set -e
        cd data-processor
        echo "🔍 验证爬虫结果..."
        
        # 验证核心采集工具
        echo "📋 检查核心采集工具..."
        if [ -f "universal-stable-crawler.js" ]; then
          echo "✅ 通用稳定爬虫存在"
        fi
        if [ -f "index-optimized.js" ]; then
          echo "✅ 主处理器存在"
        fi
        if [ -f "config.js" ]; then
          echo "✅ 配置文件存在"
        fi
        
        # 验证数据文件
        echo "📊 验证数据文件..."
        if [ -d "../data" ]; then
          data_files=$(ls -1 ../data/*.json 2>/dev/null | grep -v brands.json | wc -l)
          echo "✅ 数据文件数量: $data_files"
        fi
        
        # 验证日志文件
        if [ -d "logs" ]; then
          log_files=$(find logs -name "*.log" -o -name "*.json" 2>/dev/null | wc -l)
          echo "✅ 日志文件数量: $log_files"
        fi
        
        echo "✅ 爬虫结果验证完成"
        
    - name: 生成执行报告
      run: |
        set -e
        cd data-processor
        
        echo "## 🚀 爬虫采集执行结果" >> $GITHUB_STEP_SUMMARY
        echo "- 执行时间: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "- 目标品牌: ${{ needs.setup.outputs.brands }}" >> $GITHUB_STEP_SUMMARY
        echo "- 并发设置: ${{ needs.setup.outputs.concurrent }}" >> $GITHUB_STEP_SUMMARY
        
        # 显示新爬虫系统信息
        echo "## 🔧 爬虫系统信息" >> $GITHUB_STEP_SUMMARY
        echo "- 系统版本: 通用稳定爬虫 v1.0" >> $GITHUB_STEP_SUMMARY
        echo "- 核心特性:" >> $GITHUB_STEP_SUMMARY
        echo "  - 🏗️ 基于奥迪成功案例的通用爬虫" >> $GITHUB_STEP_SUMMARY
        echo "  - ⚡ 适度的并发控制（2个并发）" >> $GITHUB_STEP_SUMMARY
        echo "  - 🔄 每车型立即保存策略" >> $GITHUB_STEP_SUMMARY
        echo "  - 📊 断点续传支持" >> $GITHUB_STEP_SUMMARY
        echo "  - 🎯 智能超时设置" >> $GITHUB_STEP_SUMMARY
        echo "  - 🛡️ 数据完整性验证" >> $GITHUB_STEP_SUMMARY
        
        # 统计数据文件
        if [ -d "../data" ]; then
          data_files=$(ls -1 ../data/*.json 2>/dev/null | grep -v brands.json | wc -l)
          echo "## 📁 数据文件统计" >> $GITHUB_STEP_SUMMARY
          echo "- 品牌数据文件: $data_files 个" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 统计日志文件
        if [ -d "logs" ]; then
          log_files=$(find logs -name "*.log" -o -name "*.json" 2>/dev/null | wc -l)
          echo "- 日志文件: $log_files 个" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 提交更新
      run: |
        set -e
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        echo "添加数据文件..."
        git add data/*.json || true
        
        echo "添加爬虫日志..."
        git add -f data-processor/logs/*.log || true
        git add -f data-processor/logs/*.json || true
        
        if git diff --staged --quiet; then
          echo "没有变更需要提交"
        else
          git commit -m "🚀 爬虫数据更新 - $(date '+%Y-%m-%d') [目标: ${{ needs.setup.outputs.brands }}]"
          git pull origin main --rebase --autostash
          git push origin HEAD:main
        fi