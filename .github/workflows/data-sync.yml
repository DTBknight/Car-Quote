name: Data Sync Task

on:
  schedule:
    # 每周一凌晨0点 (UTC时间)
    - cron: '0 0 * * 1'
  workflow_dispatch: # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    concurrency:
      group: data-sync
      cancel-in-progress: false
    permissions:
      contents: write
      pull-requests: write
      actions: write
      checks: write
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
      
    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: data-processor/package-lock.json
        
    - name: Install Chrome Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg2 jq
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    - name: Install Dependencies
      run: |
        cd data-processor
        npm ci
        
    - name: Execute Data Sync
      run: |
        cd data-processor
        # 使用最新的采集工具进行数据同步
        echo "🚀 开始执行数据同步任务..."
        echo "📅 执行时间: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "🔧 使用工具: index-sync.js (基于增强版采集工具)"
        
        # 执行数据同步
        node index-sync.js
        
        echo "✅ 数据同步任务完成"
      env:
        # Set environment variables
        NODE_ENV: production
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
        PUPPETEER_EXECUTABLE_PATH: /usr/bin/google-chrome-stable
      timeout-minutes: 300
        
    - name: Validate Data Integrity
      run: |
        set -e
        cd data-processor
        echo "🔍 验证数据完整性..."
        
        # 验证采集工具配置
        echo "📋 检查采集工具配置..."
        if [ -f "config.js" ]; then
          echo "✅ 采集工具配置文件存在"
          echo "   - 超时设置: $(grep -o 'timeout: [0-9]*' config.js || echo '默认值')"
          echo "   - 页面等待时间: $(grep -o 'pageWaitTime: [0-9]*' config.js || echo '默认值')"
        else
          echo "❌ 采集工具配置文件缺失"
        fi
        
        # 验证数据文件
        echo "📊 验证数据文件..."
        node scripts/validate.js
        
        echo "✅ 数据完整性验证完成"
        
    - name: Generate Summary
      run: |
        set -e
        cd data-processor
        
        echo "## 🚀 数据同步结果" >> $GITHUB_STEP_SUMMARY
        echo "- 执行时间: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        
        # 显示采集工具版本信息
        echo "## 🔧 采集工具信息" >> $GITHUB_STEP_SUMMARY
        echo "- 工具版本: 增强版 v2.0" >> $GITHUB_STEP_SUMMARY
        echo "- 主要功能:" >> $GITHUB_STEP_SUMMARY
        echo "  - 实时数据采集日志显示" >> $GITHUB_STEP_SUMMARY
        echo "  - 智能价格提取（过滤询底价等额外文字）" >> $GITHUB_STEP_SUMMARY
        echo "  - 参数配置页面自动采集" >> $GITHUB_STEP_SUMMARY
        echo "  - 外观/内饰图片分类采集" >> $GITHUB_STEP_SUMMARY
        echo "  - 多色块支持（单色、双色、多色渐变）" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "weekly-execution.log" ]; then
          echo "## 📊 执行详情" >> $GITHUB_STEP_SUMMARY
          echo "- 日志文件: weekly-execution.log" >> $GITHUB_STEP_SUMMARY
          
          # 查找最新的报告文件
          latest_report=$(ls -t weekly-report-*.json 2>/dev/null | head -1)
          if [ -n "$latest_report" ]; then
            echo "- 执行报告: $latest_report" >> $GITHUB_STEP_SUMMARY
            success_rate=$(jq -r '.successRate' "$latest_report" 2>/dev/null || echo "N/A")
            echo "- 成功率: $success_rate" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## ❌ 执行状态" >> $GITHUB_STEP_SUMMARY
          echo "- 执行失败: 未找到日志文件" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Commit Updates
      run: |
        set -e
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        echo "Adding data files..."
        git add data/*.json || true
        echo "Adding weekly logs and reports..."
        git add -f data-processor/weekly-execution.log data-processor/weekly-report-*.json data-processor/weekly-progress.json || true
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "📊 Data sync update - $(date '+%Y-%m-%d')"
          git pull origin main --rebase --autostash
          git push origin HEAD:main
        fi